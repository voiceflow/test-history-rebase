import { Nullable, Utils } from '@voiceflow/common';
import { SvgIcon, TippyTooltip } from '@voiceflow/ui';
import cn from 'classnames';
import React from 'react';
import { AnyStyledComponent } from 'styled-components';

import Avatar from '@/components/Avatar';
import { LEARN_KNOWLEDGE_BASE, LEARN_NO_MATCH } from '@/constants';
import { KnowledgeBaseSources, PMStatus } from '@/pages/Prototype/types';
import { ClassName } from '@/styles/constants';
import { openURLInANewTab } from '@/utils/window';

import * as S from './styles';

export interface BaseMessageProps extends S.ContainerProps, React.PropsWithChildren {
  onClick?: React.MouseEventHandler;
  style?: React.CSSProperties;
  startTime?: string;
  rightAlign?: boolean;
  withLogo?: boolean;
  isFirstInSeries?: boolean;
  userSpeak?: boolean;
  withAnimation?: boolean;
  isLast?: boolean;
  bubble?: boolean;
  color?: string;
  avatarURL?: string;
  className?: string;
  focused?: boolean;
  animationDelay?: number;
  animationContainer?: AnyStyledComponent;
  isLastInSeries?: boolean;
  isLastBotMessage?: boolean;
  isLastBubble?: boolean;
  forceIcon?: boolean;
  pmStatus: Nullable<PMStatus>;
  onDoubleClick?: () => void;
  isAiMessage?: boolean;
  knowledgeBase?: KnowledgeBaseSources;
}

const BaseMessage: React.FC<BaseMessageProps> = ({
  rightAlign,
  isFirstInSeries,
  children,
  withLogo = true,
  onClick,
  startTime,
  withAnimation = true,
  isLast,
  color,
  bubble = true,
  avatarURL,
  className,
  focused = false,
  isLastInSeries = false,
  animationContainer = S.FadeUp,
  isLastBotMessage,
  forceIcon,
  pmStatus,
  isLastBubble,
  isAiMessage,
  knowledgeBase,
  ...props
}) => {
  const InnerContainer = React.useMemo(() => (withAnimation ? animationContainer : React.Fragment), []);
  const hideIcon = pmStatus === PMStatus.FAKE_LOADING && isLastBubble;
  const showIconLogo = forceIcon || (withLogo && isLastInSeries && !hideIcon);

  return (
    <S.Container focused={focused} className={cn(ClassName.CHAT_DIALOG_MESSAGE, className)} rightAlign={rightAlign} {...props}>
      <InnerContainer>
        {showIconLogo && (
          <S.LogoCircle shadow={false} size={32} forAvatar={!!avatarURL}>
            {avatarURL ? (
              <Avatar className={ClassName.PROTOTYPE_MESSAGE_ICON} noHover noShadow url={avatarURL} />
            ) : (
              <SvgIcon icon="voiceflowV" size={16} color="#fff" />
            )}
          </S.LogoCircle>
        )}

        <TippyTooltip offset={[0, 8]} position="top" content={startTime} disabled={!startTime}>
          {bubble ? (
            <S.Bubble rightAlign={rightAlign} color={color} onClick={onClick} clickable={!!onClick} isFirstInSeries={isFirstInSeries}>
              {children}
            </S.Bubble>
          ) : (
            children
          )}
        </TippyTooltip>
      </InnerContainer>
      {isAiMessage && !knowledgeBase?.length && (
        <TippyTooltip
          style={{ alignSelf: 'center', marginLeft: 12 }}
          width={252}
          interactive={true}
          content={
            <TippyTooltip.FooterButton buttonText="More" onClick={() => openURLInANewTab(LEARN_NO_MATCH)}>
              This response was generated by AI.
            </TippyTooltip.FooterButton>
          }
        >
          <SvgIcon icon="aiSmall" color="#8da2b5" />
        </TippyTooltip>
      )}

      {knowledgeBase?.length && (
        <TippyTooltip
          style={{ alignSelf: 'center', marginLeft: 12 }}
          width={252}
          interactive={true}
          content={
            <TippyTooltip.FooterButton buttonText="More" onClick={() => openURLInANewTab(LEARN_KNOWLEDGE_BASE)}>
              <div style={{ wordBreak: 'break-word' }}>
                This response was generated by AI using the Knowledge Base.
                <br />
                <br />
                Potential Sources:
                <br />
                {Utils.array.unique(knowledgeBase.map((source) => source.name)).map((name, index) => (
                  <b key={index}>
                    [{index + 1}] {name}
                    <br />
                  </b>
                ))}
              </div>
            </TippyTooltip.FooterButton>
          }
        >
          <SvgIcon icon="brain" color="#8da2b5" />
        </TippyTooltip>
      )}
    </S.Container>
  );
};

export default Object.assign(BaseMessage, {
  Container: S.Container,
  Bubble: S.Bubble,
  FadeDown: S.FadeDown,
  FadeUp: S.FadeUp,
  DelayedFadeUp: S.DelayedFadeUp,
});
