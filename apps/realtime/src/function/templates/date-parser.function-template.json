{
  "functions": [
    {
      "id": "65e8c144c6d97c82ca1237e8",
      "name": "Date parser",
      "code": "export default async function main(args) {\n    const { originalDate, timezone } = args.inputVars;\n    let timezoneOffset = timezone;\n  \n    // Validate our input values\n    if (!originalDate) {\n        return {\n            outputVars: {\n                error: `No original date was passed`\n            },\n            next: {\n                path: 'error'\n            },\n            trace: [\n                {\n                    type: 'debug',\n                    payload: {\n                        message: `No original date was passed`\n                    }\n                }\n            ],\n        }\n    }\n  \n    if (timezoneOffset === undefined || isNaN(parseFloat(timezoneOffset))) { timezoneOffset = 0; }\n  \n    try {\n        // Send the original date and timezone offset to the server, which will perform the date conversion\n        const result = await fetch(\"https://api-date.voiceflow.fr/date\", {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                date: originalDate,\n                tz: Number(timezoneOffset)\n            })\n        });\n  \n        // SUCCESS - Output the parsed dates\n        const responseBody = result?.json;\n        if (responseBody.date) {\n            let date = new Date(responseBody.date);\n            return {\n                outputVars: {\n                    ISODate: responseBody.date,\n                    humanReadableDate: date.toLocaleString()\n                },\n                next: {\n                    path: 'success'\n                },\n                trace: [\n                    {\n                        type: 'debug',\n                        payload: {\n                            message: `Converting string \"${originalDate}\" to ${responseBody.date}`\n                        }\n                    }\n                ],\n            }\n        }\n  \n        // FAILURE - The server gave an error response, so report that back to the designer\n        return {\n            outputVars: {\n                error: `Unable to convert the given date`\n            },\n            next: {\n                path: 'error'\n            },\n            trace: [\n                {\n                    type: 'debug',\n                    payload: {\n                        message: `API response error while trying to convert the given date`\n                    }\n                }\n            ],\n        }\n    } catch (error) {\n        return {\n            outputVars: {\n                error\n            },\n            next: {\n                path: 'error'\n            },\n            trace: [\n                {\n                    type: 'debug',\n                    payload: {\n                        message: error\n                    }\n                }\n            ],\n        }\n    }\n}",
      "image": null,
      "description": "Convert input messages to human readable dates (e.g. 3/6/2024, 2:33:39 PM).",
      "pathOrder": [],
      "createdAt": "2024-03-06T19:17:25.000Z",
      "updatedAt": "2024-03-06T19:17:25.000Z",
      "folderID": null,
      "updatedByID": 16,
      "createdByID": 16
    }
  ],
  "functionPaths": [
    {
      "id": "65e8c193c6d97c82ca1237ef",
      "name": "success",
      "label": "success path",
      "createdAt": "2024-03-06T19:18:43.918Z",
      "functionID": "65e8c144c6d97c82ca1237e8"
    },
    {
      "id": "65e8c190c6d97c82ca1237ee",
      "name": "error",
      "label": "error path",
      "createdAt": "2024-03-06T19:18:40.047Z",
      "functionID": "65e8c144c6d97c82ca1237e8"
    }
  ],
  "functionVariables": [
    {
      "id": "65e8c168c6d97c82ca1237eb",
      "name": "error",
      "type": "output",
      "description": "error message (if any).",
      "createdAt": "2024-03-06T19:18:00.445Z",
      "functionID": "65e8c144c6d97c82ca1237e8"
    },
    {
      "id": "65e8c152c6d97c82ca1237ea",
      "name": "originalDate",
      "type": "input",
      "description": "Date to convert to ISO 8601 and human readable date.",
      "createdAt": "2024-03-06T19:17:38.829Z",
      "functionID": "65e8c144c6d97c82ca1237e8"
    },
    {
      "id": "65e8c152c6d97c82ca1237e9",
      "name": "timezone",
      "type": "input",
      "description": "Timezone of the input date as a numeric offset.",
      "createdAt": "2024-03-06T19:17:38.232Z",
      "functionID": "65e8c144c6d97c82ca1237e8"
    },
    {
      "id": "65e8c169c6d97c82ca1237ed",
      "name": "humanReadableDate",
      "type": "output",
      "description": "originalDate converted to human readable.",
      "createdAt": "2024-03-06T19:18:01.223Z",
      "functionID": "65e8c144c6d97c82ca1237e8"
    },
    {
      "id": "65e8c168c6d97c82ca1237ec",
      "name": "ISODate",
      "type": "output",
      "description": "originalDate converted to an ISO 8601 format.",
      "createdAt": "2024-03-06T19:18:00.822Z",
      "functionID": "65e8c144c6d97c82ca1237e8"
    }
  ]
}
