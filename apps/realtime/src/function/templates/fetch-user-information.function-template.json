{
  "functions": [
    {
      "id": "65e8c075c6d97c82ca1237dd",
      "name": "Fetch user information",
      "code": "export default async function main(args) {\n  // Extract input variables from args\n  const { userId } = args.inputVars;\n\n  // Validate that the required input variable is provided\n  if (!userId) {\n    return {\n      next: { path: 'error' },\n      trace: [{ type: \"debug\", payload: { message: \"Missing required input variable: userId\" } }]\n    };\n  }\n\n  // Define the URL for fetching user information, incorporating the userId\n  const url = `https://exampleapi.com/api/v1/users/${userId}`;\n\n  // Configure the fetch request\n  const config = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  try {\n    // Make the API call\n    const response = await fetch(url, config);\n\n    // Check if the response status is OK\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    // Extract the JSON body from the response\n    const responseBody = response.json;\n\n    // Validate the responseBody structure as expected\n    if (!responseBody || typeof responseBody !== 'object') {\n      throw new Error(\"Invalid or missing response body from the API\");\n    }\n\n    // Example: Extract user name and email from the response\n    const userName = responseBody.name;\n    const userEmail = responseBody.email;\n\n    // Create the success return object with extracted data\n    return {\n      outputVars: { userName, userEmail },\n      next: { path: 'success' },\n      trace: [\n        { \n          type: \"text\", \n          payload: { message: `User info retrieved: Name - ${userName}, Email - ${userEmail}` }\n        }\n      ]\n    };\n  } catch (error) {\n    return {\n      next: { path: 'error' },\n      trace: [{ type: \"debug\", payload: { message: \"Error: \" + error.message } }]\n    };\n  }\n}",
      "image": null,
      "description": "Demonstrates how to make an HTTP request to fetch user information.",
      "pathOrder": [],
      "createdAt": "2024-03-06T20:43:46.000Z",
      "updatedAt": "2024-03-06T20:43:46.000Z",
      "folderID": null,
      "updatedByID": 16,
      "createdByID": 16
    }
  ],
  "functionPaths": [
    {
      "id": "65e8c096c6d97c82ca1237e0",
      "name": "error",
      "label": "Error",
      "createdAt": "2024-03-06T20:43:45.999Z",
      "functionID": "65e8c075c6d97c82ca1237dd"
    },
    {
      "id": "65e8c096c6d97c82ca1237e1",
      "name": "success",
      "label": "Success",
      "createdAt": "2024-03-06T20:43:46.000Z",
      "functionID": "65e8c075c6d97c82ca1237dd"
    }
  ],
  "functionVariables": [
    {
      "id": "65e8c07cc6d97c82ca1237de",
      "name": "userId",
      "type": "input",
      "description": "ID of the user.",
      "createdAt": "2024-03-06T20:43:45.999Z",
      "functionID": "65e8c075c6d97c82ca1237dd"
    },
    {
      "id": "65e8c085c6d97c82ca1237df",
      "name": "userEmail",
      "type": "output",
      "description": "Email of the user",
      "createdAt": "2024-03-06T20:43:46.000Z",
      "functionID": "65e8c075c6d97c82ca1237dd"
    },
    {
      "id": "65e8d629db6d31f7c399637d",
      "name": "userName",
      "type": "output",
      "description": "The first and last name of the user.",
      "createdAt": "2024-03-06T20:46:33.022Z",
      "functionID": "65e8c075c6d97c82ca1237dd"
    }
  ]
}
